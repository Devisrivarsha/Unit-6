#include <iostream>
#include <vector>
#include <queue>

// A Tree node
class Node {
public:
    char data;
    unsigned freq;
    Node *left, *right;

    Node(char data, unsigned freq)
        : data(data), freq(freq), left(nullptr), right(nullptr) {}
};

// Comparator for the priority queue
class Compare {
public:
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;
    }
};

// The Huffman Tree
class HuffmanTree {
private:
    Node* root;

    // Helper function to print codes
    void printCodes(Node* root, std::string str) {
        if (!root) return;

        if (root->data != '$') {
            std::cout << root->data << ": " << str << "\n";
        }

        printCodes(root->left, str + "0");
        printCodes(root->right, str + "1");
    }

public:
    HuffmanTree() : root(nullptr) {}

    // Builds the Huffman Tree and print codes
    void buildAndPrint(const std::vector<char>& data, const std::vector<int>& freq, size_t size) {
        Node *left, *right, *top;

        std::priority_queue<Node*, std::vector<Node*>, Compare> minHeap;

        for (size_t i = 0; i < size; ++i) {
            minHeap.push(new Node(data[i], freq[i]));
        }

        while (minHeap.size() != 1) {
            left = minHeap.top();
            minHeap.pop();

            right = minHeap.top();
            minHeap.pop();

            top = new Node('$', left->freq + right->freq);
            top->left = left;
            top->right = right;
            minHeap.push(top);
        }

        root = minHeap.top();
        printCodes(root, "");
    }
};

int main() {
    std::vector<char> data = {'a', 'b', 'c', 'd', 'e', 'f'};
    std::vector<int> freq = {5, 9, 12, 13, 16, 45};
    size_t size = data.size();

    HuffmanTree huffmanTree;
    huffmanTree.buildAndPrint(data, freq, size);

    return 0;
}
